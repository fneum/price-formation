from shutil import move, unpack_archive
import yaml

from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

HTTP = HTTPRemoteProvider()

configfile: "config/config.yaml"

localrules:
    download_technology_data,
    clean,
    send,
    receive,

wildcard_constraints:
    lt="[^/]+" # cannot include folder separators

RESULTS = "results/" + (config["run"] + "/" if config["run"] else "")

rule download_weather_data:
    input:
        HTTP.remote("https://researchdata.reading.ac.uk/321/4/ERA5_data_1950-2020.zip", keep_local=True, static=True)
    output:
        protected(directory("resources/reading"))
    run:
        unpack_archive(input[0], output[0])


rule download_technology_data:
    output:
        tech_data=RESULTS + "technology_data.csv",
    retries: 2
    conda:
        "envs/environment.yaml"
    script:
        "scripts/download_tech_data.py"


rule prepare:
    input:
        onwind_cf="resources/reading/ERA5_data_1950-2020/wp_onshore/NUTS_0_wp_ons_sim_0_historical_loc_weighted.nc",
        solar_cf="resources/reading/ERA5_data_1950-2020/solar_power_capacity_factor/NUTS_0_sp_historical.nc",
        tech_data=RESULTS + "technology_data.csv",
    output:
        network=RESULTS + "network_prepared_LT-{lt}.nc",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/prepare.py"


rule solve:
    input:
        network=RESULTS + "network_prepared_LT-{lt}.nc",
    output:
        network=RESULTS + "network_solved_LT-{lt}.nc",
        energy_balance=RESULTS + "summary/LT-{lt}/energy_balance.csv",
        statistics=RESULTS + "summary/LT-{lt}/statistics.csv",
    resources: 
        mem_mb=config["solver"]["mem_mb"],
        walltime=config["solver"]["walltime"],
    threads: 4
    benchmark: RESULTS + "benchmarks/LT-{lt}.log"
    conda:
        "envs/environment.yaml"
    script:
        "scripts/solve.py"


rule plot:
    input:
        matplotlibrc="matplotlibrc",
        **rules.solve.output
    output:
        price_duration=RESULTS + "graphics/LT-{lt}/price_duration.pdf",
        load_duration=RESULTS + "graphics/LT-{lt}/load_duration.pdf",
        price_time_series=RESULTS + "graphics/LT-{lt}/price_time_series.pdf",
        mu_energy_balance=RESULTS + "graphics/LT-{lt}/mu_energy_balance.pdf",
        energy_balance=RESULTS + "graphics/LT-{lt}/energy_balance.pdf",
        hydrogen_bidding=RESULTS + "graphics/LT-{lt}/hydrogen_bidding.pdf",
        battery_bidding=RESULTS + "graphics/LT-{lt}/battery_bidding.pdf",
        cost_recovery=RESULTS + "graphics/LT-{lt}/cost_recovery.pdf",
        soc=RESULTS + "graphics/LT-{lt}/soc.pdf",
        **{sns: RESULTS + "graphics/LT-{lt}/supply_demand_" + sns + ".pdf" for sns in config["supply_demand_curve"]["snapshots"]}
    resources:
        mem_mb=8000,
    conda:
        "envs/environment.yaml"
    script:
        "scripts/plot.py"


rule solve_myopic_dispatch:
    input:
        prepared_network=RESULTS + "network_prepared_LT-{lt}.nc",
        solved_network=RESULTS + "network_solved_LT-{lt}.nc",
    output:
        network=RESULTS + "network_myopic_LT-{lt}_ST-{st}.nc",
        energy_balance=RESULTS + "summary/LT-{lt}/ST-{st}/energy_balance.csv",
        statistics=RESULTS + "summary/LT-{lt}/ST-{st}/statistics.csv",
    resources:
        mem_mb=config["solver"]["mem_mb"],
        walltime=config["solver"]["walltime"],
    threads: 4
    retries: 2
    benchmark: RESULTS + "benchmarks/LT-{lt}_ST-{st}.log"
    conda:
        "envs/environment.yaml"
    script:
        "scripts/solve_myopic_dispatch.py"


rule plot_myopic_dispatch:
    input:
        matplotlibrc="matplotlibrc",
        **rules.solve_myopic_dispatch.output
    output:
        price_duration=RESULTS + "graphics/LT-{lt}/ST-{st}/price_duration.pdf",
        load_duration=RESULTS + "graphics/LT-{lt}/ST-{st}/load_duration.pdf",
        price_time_series=RESULTS + "graphics/LT-{lt}/ST-{st}/price_time_series.pdf",
        mu_energy_balance=RESULTS + "graphics/LT-{lt}/ST-{st}/mu_energy_balance.pdf",
        energy_balance=RESULTS + "graphics/LT-{lt}/ST-{st}/energy_balance.pdf",
        hydrogen_bidding=RESULTS + "graphics/LT-{lt}/ST-{st}/hydrogen_bidding.pdf",
        battery_bidding=RESULTS + "graphics/LT-{lt}/ST-{st}/battery_bidding.pdf",
        cost_recovery=RESULTS + "graphics/LT-{lt}/ST-{st}/cost_recovery.pdf",
        soc=RESULTS + "graphics/LT-{lt}/ST-{st}/soc.pdf",
        **{sns: RESULTS + "graphics/LT-{lt}/ST-{st}/supply_demand_" + sns + ".pdf" for sns in config["supply_demand_curve"]["snapshots"]}
    resources:
        mem_mb=8000,
    conda:
        "envs/environment.yaml"
    script:
        "scripts/plot.py"


rule clean:
    run:
         import shutil

         shutil.rmtree("results")


rule send:
    params:
        send_ignore = config["cluster-sync"]["send-ignore"],
        url = config["cluster-sync"]["url"],
        cluster_base_dir = config["cluster-sync"]["cluster-base-dir"],
        custom_args = config["cluster-sync"]["custom-args"],
    shell:
        """
        rsync -ravzh --progress --update --no-g {params.custom_args} . --exclude-from={params.send_ignore} {params.url}:{params.cluster_base_dir}
        """


rule receive:
    params:
        receive_ignore = config["cluster-sync"]["receive-ignore"],
        url = config["cluster-sync"]["url"],
        cluster_base_dir = config["cluster-sync"]["cluster-base-dir"] + "/",
        custom_args = config["cluster-sync"]["custom-args"],
    shell:
        """
        rsync -ravzh --progress --update --exclude-from={params.receive_ignore} {params.custom_args} {params.url}:{params.cluster_base_dir} .
        """


rule all:
    input:
        expand(rules.plot_myopic_dispatch.output[0], **config["scenario"]),
        expand(rules.plot.output[0], **config["scenario"])


rule solve_myopic_dispatch_all:
    input:
        expand(rules.solve_myopic_dispatch.output[0], **config["scenario"])


rule plot_all:
    input:
        expand(rules.plot.output[0], **config["scenario"])


rule solve_all:
    input:
        expand(rules.solve.output[0], **config["scenario"])


rule prepare_all:
    input:
        expand(rules.prepare.output[0], **config["scenario"])
