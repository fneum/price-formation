from shutil import move, unpack_archive
import yaml

from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

HTTP = HTTPRemoteProvider()

configfile: "config/config.yaml"

SCENARIO_FN = "config/scenarios.yaml"

with open(SCENARIO_FN, "r") as f:
    scenarios = yaml.safe_load(f)


rule download_weather_data:
    input:
        HTTP.remote("https://researchdata.reading.ac.uk/321/4/ERA5_data_1950-2020.zip", keep_local=True, static=True)
    output:
        protected(directory("resources/reading"))
    run:
        unpack_archive(input[0], output[0])


rule download_technology_data:
    input:
        scenarios=SCENARIO_FN,
    output:
        tech_data="results/{run}/technology_data.csv",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/download_tech_data.py"


rule solve:
    input:
        scenarios=SCENARIO_FN,
        onwind_cf="resources/reading/ERA5_data_1950-2020/wp_onshore/NUTS_0_wp_ons_sim_0_historical_loc_weighted.nc",
        solar_cf="resources/reading/ERA5_data_1950-2020/solar_power_capacity_factor/NUTS_0_sp_historical.nc",
        tech_data="results/{run}/technology_data.csv",
    output:
        network="results/{run}/network.nc",
        energy_balance="results/{run}/summary/energy_balance.csv",
        statistics="results/{run}/summary/statistics.csv",
    resources: 
        mem_mb=config["solver"]["mem_mb"],
        walltime=config["solver"]["walltime"],
    threads: 4
    conda:
        "envs/environment.yaml"
    script:
        "scripts/solve.py"


rule plot:
    input:
        scenarios=SCENARIO_FN,
        matplotlibrc="matplotlibrc",
        **rules.solve.output
    output:
        price_duration="results/{run}/graphics/price_duration.pdf",
        price_duration_attributed="results/{run}/graphics/price_duration_attributed.pdf",
        price_time_series="results/{run}/graphics/price_time_series.pdf",
        mu_energy_balance="results/{run}/graphics/mu_energy_balance.pdf",
        energy_balance="results/{run}/graphics/energy_balance.pdf",
        hydrogen_bidding="results/{run}/graphics/hydrogen_bidding.pdf",
        battery_bidding="results/{run}/graphics/battery_bidding.pdf",
        **{sns: "results/{run}/graphics/supply_demand_" + sns + ".pdf" for sns in config["supply_demand_curve"]["snapshots"]}
    conda:
        "envs/environment.yaml"
    script:
        "scripts/plot.py"


rule solve_operations:
    input:
        scenarios=SCENARIO_FN,
        network="results/{run}/network.nc"
    output:
        network="results/{run}/networks_operations.nc",
        energy_balance="results/{run}/summary/operations/energy_balance.csv",
        statistics="results/{run}/summary/operations/statistics.csv",
    resources:
        mem_mb=config["solver"]["mem_mb"],
        walltime=config["solver"]["walltime"],
    threads: 4
    conda:
        "envs/environment.yaml"
    script:
        "scripts/solve_operations.py"


rule plot_operations:
    input:
        scenarios=SCENARIO_FN,
        matplotlibrc="matplotlibrc",
        **rules.solve_operations.output
    output:
        price_duration="results/{run}/graphics/operations/price_duration.pdf",
        price_duration_attributed="results/{run}/graphics/price_duration_attributed.pdf",
        price_time_series="results/{run}/graphics/operations/price_time_series.pdf",
        mu_energy_balance="results/{run}/graphics/operations/mu_energy_balance.pdf",
        energy_balance="results/{run}/graphics/operations/energy_balance.pdf",
        hydrogen_bidding="results/{run}/graphics/operations/hydrogen_bidding.pdf",
        battery_bidding="results/{run}/graphics/operations/battery_bidding.pdf",
        **{sns: "results/{run}/graphics/operations/supply_demand_" + sns + ".pdf" for sns in config["supply_demand_curve"]["snapshots"]}
    conda:
        "envs/environment.yaml"
    script:
        "scripts/plot.py"


rule plot_price_durations:
    input:
        scenarios=SCENARIO_FN,
        matplotlibrc="matplotlibrc",
        networks=lambda w: expand(f"results/{run}/network.nc" for run in config["price_duration_curve"]["scenarios"][w.key])
    output:
        price_durations="results/graphics/{key}/price_durations.pdf",
        price_durations_log="results/graphics/{key}/price_durations_log.pdf",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/price_duration.py"


rule plot_all_price_durations:
    input:
        expand(rules.plot_price_durations.output[0], key=config["price_duration_curve"]["scenarios"].keys())


rule plot_all:
    input:
        expand(rules.plot.output[0], run=scenarios.keys())


rule solve_all:
    input:
        expand(rules.solve.output[0], run=scenarios.keys())


rule plot_operations_all:
    input:
        expand(rules.plot_operations.output[0], run=scenarios.keys())


rule solve_operations_all:
    input:
        expand(rules.solve_operations.output[0], run=scenarios.keys())

rule clean:
    run:
         import shutil

         shutil.rmtree("results")


rule send:
    params:
        send_ignore = config["cluster-sync"]["send-ignore"],
        url = config["cluster-sync"]["url"],
        cluster_base_dir = config["cluster-sync"]["cluster-base-dir"],
        custom_args = config["cluster-sync"]["custom-args"],
    shell:
        """
        rsync -ravzh --progress --update --no-g {params.custom_args} . --exclude-from={params.send_ignore} {params.url}:{params.cluster_base_dir}
        """


rule receive:
    params:
        receive_ignore = config["cluster-sync"]["receive-ignore"],
        url = config["cluster-sync"]["url"],
        cluster_base_dir = config["cluster-sync"]["cluster-base-dir"] + "/",
        custom_args = config["cluster-sync"]["custom-args"],
    shell:
        """
        rsync -ravzh --progress --update --exclude-from={params.receive_ignore} {params.custom_args} {params.url}:{params.cluster_base_dir} .
        """
